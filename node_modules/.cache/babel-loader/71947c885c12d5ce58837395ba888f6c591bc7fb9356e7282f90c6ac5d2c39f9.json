{"ast":null,"code":"var _jsxFileName = \"/combinatorics-solver/combinatorics-solver-frontend/src/components/HamiltonianCycleComponent.jsx\",\n  _s = $RefreshSig$();\n// HamiltonianCycleComponent.jsx\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HamiltonianCycleComponent = () => {\n  _s();\n  const [matrix, setMatrix] = useState([[0, 1, 0], [1, 0, 1], [0, 1, 0]]);\n  const handleChange = (rowIndex, colIndex, value) => {\n    const newMatrix = [...matrix];\n    newMatrix[rowIndex][colIndex] = value;\n    setMatrix(newMatrix);\n  };\n  const handleSubmit = async () => {\n    try {\n      const response = await axios.post('https://combinatorics-solver.onrender.com/hamiltonian_cycle', {\n        graph: matrix\n      });\n      console.log('Cycle:', response.data.cycle);\n    } catch (error) {\n      console.error('Error solving Hamiltonian Cycle problem', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Hamiltonian Cycle Problem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: row.map((col, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: col,\n        onChange: e => handleChange(rowIndex, colIndex, parseInt(e.target.value))\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Solve Hamiltonian Cycle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(HamiltonianCycleComponent, \"WqE+jHn/Swkb6lj7CGzhAdy4aXg=\");\n_c = HamiltonianCycleComponent;\nexport default HamiltonianCycleComponent;\nvar _c;\n$RefreshReg$(_c, \"HamiltonianCycleComponent\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","HamiltonianCycleComponent","_s","matrix","setMatrix","handleChange","rowIndex","colIndex","value","newMatrix","handleSubmit","response","post","graph","console","log","data","cycle","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","col","type","onChange","e","parseInt","target","onClick","_c","$RefreshReg$"],"sources":["/combinatorics-solver/combinatorics-solver-frontend/src/components/HamiltonianCycleComponent.jsx"],"sourcesContent":["// HamiltonianCycleComponent.jsx\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nconst HamiltonianCycleComponent = () => {\n  const [matrix, setMatrix] = useState([[0, 1, 0], [1, 0, 1], [0, 1, 0]]);\n\n  const handleChange = (rowIndex, colIndex, value) => {\n    const newMatrix = [...matrix];\n    newMatrix[rowIndex][colIndex] = value;\n    setMatrix(newMatrix);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const response = await axios.post('https://combinatorics-solver.onrender.com/hamiltonian_cycle', { graph: matrix });\n      console.log('Cycle:', response.data.cycle);\n    } catch (error) {\n      console.error('Error solving Hamiltonian Cycle problem', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Hamiltonian Cycle Problem</h2>\n      {matrix.map((row, rowIndex) => (\n        <div key={rowIndex}>\n          {row.map((col, colIndex) => (\n            <input\n              key={colIndex}\n              type=\"number\"\n              value={col}\n              onChange={(e) => handleChange(rowIndex, colIndex, parseInt(e.target.value))}\n            />\n          ))}\n        </div>\n      ))}\n      <button onClick={handleSubmit}>Solve Hamiltonian Cycle</button>\n    </div>\n  );\n};\n\nexport default HamiltonianCycleComponent;\n\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,yBAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAEvE,MAAMQ,YAAY,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,KAAK;IAClD,MAAMC,SAAS,GAAG,CAAC,GAAGN,MAAM,CAAC;IAC7BM,SAAS,CAACH,QAAQ,CAAC,CAACC,QAAQ,CAAC,GAAGC,KAAK;IACrCJ,SAAS,CAACK,SAAS,CAAC;EACtB,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,6DAA6D,EAAE;QAAEC,KAAK,EAAEV;MAAO,CAAC,CAAC;MACnHW,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEJ,QAAQ,CAACK,IAAI,CAACC,KAAK,CAAC;IAC5C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IACjE;EACF,CAAC;EAED,oBACElB,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjCpB,MAAM,CAACqB,GAAG,CAAC,CAACC,GAAG,EAAEnB,QAAQ,kBACxBN,OAAA;MAAAmB,QAAA,EACGM,GAAG,CAACD,GAAG,CAAC,CAACE,GAAG,EAAEnB,QAAQ,kBACrBP,OAAA;QAEE2B,IAAI,EAAC,QAAQ;QACbnB,KAAK,EAAEkB,GAAI;QACXE,QAAQ,EAAGC,CAAC,IAAKxB,YAAY,CAACC,QAAQ,EAAEC,QAAQ,EAAEuB,QAAQ,CAACD,CAAC,CAACE,MAAM,CAACvB,KAAK,CAAC;MAAE,GAHvED,QAAQ;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAId,CACF;IAAC,GARMjB,QAAQ;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASb,CACN,CAAC,eACFvB,OAAA;MAAQgC,OAAO,EAAEtB,YAAa;MAAAS,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEV,CAAC;AAACrB,EAAA,CApCID,yBAAyB;AAAAgC,EAAA,GAAzBhC,yBAAyB;AAsC/B,eAAeA,yBAAyB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}