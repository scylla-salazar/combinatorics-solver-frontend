{"ast":null,"code":"var _jsxFileName = \"/combinatorics-solver/combinatorics-solver-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ProblemSelection from './components/ProblemSelection';\nimport InputForm from './components/InputForm';\nimport ResultDisplay from './components/ResultDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedProblem, setSelectedProblem] = useState('');\n  const [result, setResult] = useState(null);\n  const handleSelectProblem = problem => {\n    setSelectedProblem(problem);\n    setResult(null); // Clear previous result when a new problem is selected\n  };\n  const handleSubmit = async formData => {\n    try {\n      const response = await fetch(`https://combinatorics-solver.onrender.com/${selectedProblem}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const data = await response.json();\n      setResult(data);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Combinatorics Solver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProblemSelection, {\n      onSelectProblem: handleSelectProblem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), selectedProblem && /*#__PURE__*/_jsxDEV(InputForm, {\n      problem: selectedProblem,\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 27\n    }, this), result && /*#__PURE__*/_jsxDEV(ResultDisplay, {\n      result: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hLy1d6JpA/JJ5UAASkOF+LbSlVM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ProblemSelection","InputForm","ResultDisplay","jsxDEV","_jsxDEV","App","_s","selectedProblem","setSelectedProblem","result","setResult","handleSelectProblem","problem","handleSubmit","formData","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelectProblem","onSubmit","_c","$RefreshReg$"],"sources":["/combinatorics-solver/combinatorics-solver-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ProblemSelection from './components/ProblemSelection';\nimport InputForm from './components/InputForm';\nimport ResultDisplay from './components/ResultDisplay';\n\nfunction App() {\n  const [selectedProblem, setSelectedProblem] = useState('');\n  const [result, setResult] = useState(null);\n\n  const handleSelectProblem = (problem) => {\n    setSelectedProblem(problem);\n    setResult(null); // Clear previous result when a new problem is selected\n  };\n\n  const handleSubmit = async (formData) => {\n    try {\n      const response = await fetch(`https://combinatorics-solver.onrender.com/${selectedProblem}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n      const data = await response.json();\n      setResult(data);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Combinatorics Solver</h1>\n      <ProblemSelection onSelectProblem={handleSelectProblem} />\n      {selectedProblem && <InputForm problem={selectedProblem} onSubmit={handleSubmit} />}\n      {result && <ResultDisplay result={result} />}\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMY,mBAAmB,GAAIC,OAAO,IAAK;IACvCJ,kBAAkB,CAACI,OAAO,CAAC;IAC3BF,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;EACnB,CAAC;EAED,MAAMG,YAAY,GAAG,MAAOC,QAAQ,IAAK;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6CT,eAAe,EAAE,EAAE;QAC3FU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;MAC/B,CAAC,CAAC;MACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCb,SAAS,CAACY,IAAI,CAAC;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,oBACEpB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7B1B,OAAA,CAACJ,gBAAgB;MAAC+B,eAAe,EAAEpB;IAAoB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACzDvB,eAAe,iBAAIH,OAAA,CAACH,SAAS;MAACW,OAAO,EAAEL,eAAgB;MAACyB,QAAQ,EAAEnB;IAAa;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAClFrB,MAAM,iBAAIL,OAAA,CAACF,aAAa;MAACO,MAAM,EAAEA;IAAO;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV;AAACxB,EAAA,CAjCQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAmCZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}